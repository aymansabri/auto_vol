#!/bin/bash

## Author :	Maki
## Contact :	alan.marrec@protonmail.com
## Team :	_PRIME_


# Useless ASCII art
echo "
                     .sssssssss.
                .sssssssssssssssssss
              sssssssssssssssssssssssss
             ssssssssssssssssssssssssssss
             @@sssssssssssssssssssssss@ss
             |s@@@@sssssssssssssss@@@@s|s
      _______|sssss@@@@@sssss@@@@@sssss|s
    /         sssssssss@sssss@sssssssss|s      Drinking rum before 10 A.M makes you a pirate, not an alcoholic.
   /  .------+.ssssssss@sssss@ssssssss.|
  /  /       |...sssssss@sss@sssssss...|
 |  |        |.......sss@sss@ssss......|
 |  |        |..........s@ss@sss.......|
 |  |        |...........@ss@..........|
  \  \       |............ss@..........|
   \  '------+...........ss@...........|
    \________ .........................|
             |.........................|
            /...........................\\
           |.............................|   
              |.......................|
                  |...............|

Analyze in progress....
"

# Argument management
usage="$(basename "$0") [-h] [-d <dump_name>] [-f <folder_name>] -- Script that performs basic volatility command and stores them into a directory

where:
	-h	Show this help
	-d 	Name of the memory dump to analyze
	-f	Name of the folder"

while getopts "hd:f" optionName; do
	case "$optionName" in
		h)	echo "$usage" 
			exit ;;
		d)	dump=$2;;
		f)	base=$4;;
		[?])	echo "Wrong argument, please see the help page (-h)" 
			exit 1;;
	esac
done

# Make the ${base} directory and audit.txt into ${base}
mkdir ${base}
touch ${base}/audit.txt

# Get OS type, store it in OS variable and put it in audit.txt
# If it's a Linux memory dump, it shows informations to make your own profile.
if [[ $(strings ${dump} | grep -i "Linux version") ]]; then
	strings ${dump} | grep -i "Linux version"
	echo "Make your Linux profile"
	exit
else
	OS="$(volatility -f ${dump} imageinfo | while read line; do if [[ "$line" =~ "Profile(s)" ]]; then echo "$line" | awk '{split($0,a,": "); print a[2]}' | awk '{split($0,a,","); print a[1]}'; fi; done)"
fi

echo "OS Type : ${OS}" >> ${base}/audit.txt

# Get the name of the computer
name="$(strings ${dump} | grep "^COMPUTERNAME" | head -n 1 | awk '{split($0,a,"="); print a[2]}')"
echo "Name of the computer : ${name}" >> ${base}/audit.txt

# Get users hash
hashd="$(volatility -f ${dump} --profile="${OS}" hashdump)"
echo "" >> ${base}/audit.txt
echo "User hashs : " >> ${base}/audit.txt
echo "${hashd}" >> ${base}/audit.txt

# Get command
cmdsc="$(volatility -f ${dump} --profile="${OS}" cmdscan)"
echo "" >> ${base}/audit.txt
echo "Command scan : " >> ${base}/audit.txt
echo "${cmdscan}" >> ${base}/audit.txt

# Get consoles command
conso="$(volatility -f ${dump} --profile="${OS}" consoles)"
echo "" >> ${base}/audit.txt
echo "Consoles : " >> ${base}/audit.txt
echo "${conso}" >> ${base}/audit.txt  

# Dump pstree in current_process.txt locate in ${base} directory
volatility -f ${dump} --profile="${OS}" pstree >> ${base}/current_process.txt

# Get all process, even hidden ones (not in a tree)
volatility -f ${dump} --profile="${OS}" psxview >> ${base}/all_process.txt

# Put interesting process in the audit.txt
echo "" >> ${base}/audit.txt
echo "Interesting process : " >> ${base}/audit.txt

# Is bitlocker present ? If yes, see tools associate
if [[ $(cat ${base}/all_process.txt | grep -i "fvenotify") ]]; then
        echo "Bitlocker is present on the volume" >> ${base}/audit.txt
	echo "Bitlocker plugin is downloadable here : https://github.com/elceef/bitlocker" >> ${base}/audit.txt
	echo "Bdemount is present in libbde downloadable here : https://github.com/libyal/libbde" >> ${base}/audit.txt
fi

# Is truecrypt present ? If yes, informations stored in truecrypt_info.txt
cat ${base}/current_process.txt | grep -i "truecrypt" >> ${base}/audit.txt
if [[ $(cat ${base}/audit.txt | grep -i "truecrypt") ]]; then
	touch ${base}/truecrypt_info.txt
	echo "Truecrypt summary : " >> ${base}/truecrypt_info.txt
	volatility -f ${dump} --profile="${OS}" truecryptsummary >> ${base}/truecrypt_info.txt
	echo "" >> ${base}/truecrypt_info.txt
	echo "Passphrase : " >> ${base}/truecrypt_info.txt
	volatility -f ${dump} --profile="${OS}" truecryptpassphrase >> ${base}/truecrypt_info.txt
fi

# Clipboard paste in audit.txt
clip="$(volatility -f ${dump} --profile="${OS}" clipboard)"
echo "" >> ${base}/audit.txt
echo "Clipboard : " >> ${base}/audit.txt
echo "${clip}" >> ${base}/audit.txt

# Get screenshot from the ${dump}
mkdir ${base}/screenshot
volatility -f ${dump} --profile="${OS}" screenshot -D ${base}/screenshot/

# Do a scan of present files in the ${dump}
volatility -f ${dump} --profile="${OS}" filescan > ${base}/present_file.txt

# Do a foremost to recover some hidden files
mkdir ${base}/foremost
foremost -i ${dump} -o ${base}/foremost >> /dev/null

# Get history from ${dump}
volatility -f ${dump} --profile="${OS}" iehistory > ${base}/iehistory.txt

# Get network traffic
volatility -f ${dump} --profile="${OS}" netscan > ${base}/netscan.txt

echo "
####################
## END ! Enj0y :) ##
####################
"
